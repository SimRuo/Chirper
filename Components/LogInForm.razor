@using System.ComponentModel.DataAnnotations;
@using Microsoft.EntityFrameworkCore
@using Chirper.Data
@inject Chirper.Data.AppDbContext DbContext



<h4>Log In</h4>

<EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary class="alert alert-danger" />

    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <InputText id="email" class="form-control" @bind-Value="loginModel.Email" placeholder="Enter your email" />
        <ValidationMessage For="@(() => loginModel.Email)" class="text-danger" />
    </div>

    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText id="password" class="form-control" @bind-Value="loginModel.Password" type="password"
            placeholder="Enter your password" />
        <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="text-danger mt-1">@errorMessage</div>
        }
    </div>

    <div class="d-flex justify-content-center mt-4">
        <button type="submit" class="btn btn-primary">Log In</button>
    </div>
</EditForm>

<div class="d-flex justify-content-center mt-4">
    <button class="btn btn-secondary" @onclick="OnChangeForm">Create a new account</button>
</div>

@code {
    private LoginModel loginModel = new();
    private string errorMessage = "";
    private async Task HandleLogin()
    {
        // Retrieve the user by email
        var user = await DbContext.Users
        .FirstOrDefaultAsync(u => u.Email == loginModel.Email);

        if (user == null)
        {
            // User not found
            Console.WriteLine("User not found.");
            errorMessage = "Invalid email or password.";
            return;
        }

        // Compare passwords (use a proper password hashing library in a real app)
        if (!VerifyPassword(loginModel.Password, user.PasswordHash))
        {
            // Incorrect password
            Console.WriteLine("Invalid password.");
            errorMessage = "Invalid email or password.";
            return;
        }

        // Login successful
        Console.WriteLine("Login successful.");
        await OnLoginSuccess.InvokeAsync();
    }
    // Placeholder for password verification (replace with actual hashing logic)
    private bool VerifyPassword(string enteredPassword, string storedPasswordHash)
    {
        // In real apps, use libraries like BCrypt or PBKDF2 for secure hashing
        return enteredPassword == storedPasswordHash;
    }
    [Parameter] public EventCallback OnLoginSuccess { get; set; }
    [Parameter] public EventCallback OnChangeForm { get; set; }

    public class LoginModel
    {
        [Required, EmailAddress]
        public string Email { get; set; }
        [Required]
        public string Password { get; set; }
    }
}