@using Chirper.Services
@using Chirper.Models
@using Chirper.Data
@using Microsoft.EntityFrameworkCore;
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims;
@inject AuthenticationStateProvider AuthStateProvider
@inject ChirpService ChirpService
@inject AppDbContext DbContext


<div class="card p-3 shadow-sm mb-4 mt-4">

    <div class="form-group">
        <textarea class="form-control border-0 rounded" style="resize: none; font-size: 1.2rem;" rows="3"
            maxlength="280" placeholder="What's happening?" @bind="newChirpContent">
        </textarea>
    </div>
    <div class="d-flex justify-content-between align-items-center mt-2">
        <small class="text-muted">@($"{280 - (newChirpContent?.Length ?? 0)} characters left")</small>
        <button class="btn btn-primary rounded-pill px-4 py-2" @onclick="AddChirp"
            disabled="@(string.IsNullOrWhiteSpace(newChirpContent))">
            Chirp
        </button>
    </div>

</div>




@code {
    [Parameter] public EventCallback<Chirp> OnChirpAdded { get; set; }
    private string? newChirpContent;
    private User? exampleUser;
    private bool isInitialized;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            exampleUser = await DbContext.Users.OrderBy(u => u.Id).FirstOrDefaultAsync();

            Console.WriteLine("User loaded on first render");
        }
    }
    private async Task AddChirp()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var userClaims = authState.User;

        // Retrieve user ID from claims
        var userId = userClaims.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (!string.IsNullOrWhiteSpace(userId) && !string.IsNullOrWhiteSpace(newChirpContent))
        {
            // Query the database to get the user
            var loggedInUserId = await DbContext.Users.FirstOrDefaultAsync(u => u.Id == userId);

            if (loggedInUserId != null)
            {
                var chirp = new Chirp
                    {
                        Content = newChirpContent,
                        Author = loggedInUserId // Associate the chirp with the logged-in user
                    };

                await ChirpService.AddChirpAsync(chirp); // Save chirp through your service
                newChirpContent = string.Empty; // Clear input
                await OnChirpAdded.InvokeAsync(chirp); // Notify the parent
            }
            else
            {
                Console.WriteLine("User not found in the database.");
            }
        }
        else
        {
            Console.WriteLine("User ID or Chirp content is invalid.");
        }
    }

}
