@using System.ComponentModel.DataAnnotations;
@using Chirper.Data
@using Chirper.Models
@inject AppDbContext DbContext



<EditForm Model="@accountModel" OnValidSubmit="@HandleAccountCreation">
    <DataAnnotationsValidator />
    <ValidationSummary class="alert alert-danger" />

    <div class="mb-3">
        <label for="username" class="form-label">Username</label>
        <InputText placeholder="Enter your username" id="username" class="form-control"
            @bind-Value="accountModel.Username" />
        <ValidationMessage For="@(() => accountModel.Username)" class="text-danger" />
    </div>

    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <InputText placeholder="Enter your email" id="email" class="form-control" @bind-Value="accountModel.Email" />
        <ValidationMessage For="@(() => accountModel.Email)" class="text-danger" />
    </div>

    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText id="password" placeholder="Enter your password" class="form-control"
            @bind-Value="accountModel.Password" type="password" />
        <ValidationMessage For="@(() => accountModel.Password)" class="text-danger" />
    </div>

    <div class="d-flex justify-content-center mt-4">
        <button type="submit" class="btn btn-primary">Create Account</button>
    </div>
</EditForm>

@code {
    private AccountModel accountModel = new();

    private async Task HandleAccountCreation()
    {
        Console.WriteLine("HandleAccountCreation called.");
        try
        {
            var user = new User
                {
                    Username = accountModel.Username,
                    Email = accountModel.Email,
                    PasswordHash = accountModel.Password // Use a proper password hashing mechanism
                };

            DbContext.Users.Add(user); // Add user to the context
            await DbContext.SaveChangesAsync(); // Save changes to the database
            Console.WriteLine($"Account created for username: {user.Username}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating account: {ex.Message}");
        }
    }

    [Parameter] public EventCallback OnAccountCreated { get; set; }

    public class AccountModel
    {
        [Required]
        public string Username { get; set; }
        [Required, EmailAddress]
        public string Email { get; set; }
        [Required]
        public string Password { get; set; }
    }
}