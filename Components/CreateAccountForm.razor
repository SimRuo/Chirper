@using System.ComponentModel.DataAnnotations
@using Chirper.Data
@using Chirper.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@inject UserManager<User> UserManager
@inject AppDbContext DbContext


<h4 class="pt-3">Create Account</h4>
<p class="text-danger">@errorMessage</p>

<EditForm Model="accountModel" OnValidSubmit="HandleAccountCreation" FormName="register">
    <DataAnnotationsValidator />
    <ValidationSummary class="alert alert-danger" />

    <div class="mb-3">
        <label for="username" class="form-label">Username</label>
        <InputText placeholder="Enter your username" id="username" class="form-control"
            @bind-Value="accountModel.Username" />
        <ValidationMessage For="@(() => accountModel.Username)" class="text-danger" />

    </div>

    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <InputText placeholder="Enter your email" id="email" class="form-control" @bind-Value="accountModel.Email" />
        <ValidationMessage For="@(() => accountModel.Email)" class="text-danger" />
    </div>

    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText id="password" placeholder="Enter your password" class="form-control"
            @bind-Value="accountModel.Password" type="password" />
        <ValidationMessage For="@(() => accountModel.Password)" class="text-danger" />
    </div>

    <div class="d-flex justify-content-center mt-4">
        <button type="submit" class="btn btn-primary">Create Account</button>
    </div>
</EditForm>

@code {
    [SupplyParameterFromForm] //Without this the form wont work
    private AccountModel accountModel { get; set; } = new();
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;
    [Parameter] public EventCallback OnAccountCreated { get; set; }
    private string? errorMessage;
    private async Task HandleAccountCreation() // This should maybe be moved to a service?
    {
        errorMessage = string.Empty;

        try
        {
            // Check if the username or email already exists
            var usernameExists = await UserManager.FindByNameAsync(accountModel.Username) != null;
            if (usernameExists)
            {
                errorMessage = "Username already taken.";
                StateHasChanged();
                return;
            }

            var emailExists = await UserManager.FindByEmailAsync(accountModel.Email) != null;
            if (emailExists)
            {
                errorMessage = "Email already in use.";
                StateHasChanged();
                return;
            }

            // Create new user
            var user = new User
                {
                    UserName = accountModel.Username,
                    Email = accountModel.Email
                };

            // Attempt to create the user with the password
            var result = await UserManager.CreateAsync(user, accountModel.Password);

            if (result.Succeeded)
            {
                await OnAccountCreated.InvokeAsync(null); //callback to parent page
            }
            else
            {
                // Collect and show errors
                errorMessage = string.Join(" ", result.Errors.Select(e => e.Description));
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An unexpected error occurred. Please try again.";
            Console.WriteLine(ex.Message);
        }
    }

    public class AccountModel //This should probably be moved somewhere else
    {
        [Required]
        public string Username { get; set; }
        [Required, EmailAddress]
        public string Email { get; set; }
        [Required]
        public string Password { get; set; }
    }
}